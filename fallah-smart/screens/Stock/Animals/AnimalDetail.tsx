import React, { useCallback, useState } from 'react';
import { 
  View, 
  StyleSheet, 
  ScrollView, 
  Text, 
  TouchableOpacity, 
  Alert,
  Dimensions,
  Platform,
  ActivityIndicator,
  I18nManager,
  StatusBar,
  SafeAreaView
} from 'react-native';
import { useTheme } from '../../../context/ThemeContext';
import { useStock } from '../../../context/StockContext';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { Animal, HealthStatus, BreedingStatus } from '../types';
import { StackNavigationProp } from '@react-navigation/stack';
import { StockStackParamList } from '../../../navigation/types';
import { RouteProp } from '@react-navigation/native';
import Animated, { FadeInDown } from 'react-native-reanimated';

// Force RTL layout
I18nManager.allowRTL(true);
I18nManager.forceRTL(true);

const { width } = Dimensions.get('window');

type AnimalDetailScreenProps = {
  navigation: StackNavigationProp<StockStackParamList, 'AnimalDetail'>;
  route: RouteProp<StockStackParamList, 'AnimalDetail'>;
};

const ANIMAL_TYPES = {
  cow: { icon: 'üêÑ', name: 'ÿ®ŸÇÿ±ÿ©', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  bull: { icon: 'üêÇ', name: 'ÿ´Ÿàÿ±', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  buffalo: { icon: 'ü¶¨', name: 'ÿ¨ÿßŸÖŸàÿ≥', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  sheep: { icon: 'üêë', name: 'ÿÆÿ±ŸàŸÅ', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  ram: { icon: 'üêè', name: 'ŸÉÿ®ÿ¥', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  goat: { icon: 'üêê', name: 'ŸÖÿßÿπÿ≤', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  camel: { icon: 'üê™', name: 'ÿ¨ŸÖŸÑ', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  horse: { icon: 'üêé', name: 'ÿ≠ÿµÿßŸÜ', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  donkey: { icon: 'ü¶ì', name: 'ÿ≠ŸÖÿßÿ±', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  ox: { icon: 'üêÉ', name: 'ÿ´Ÿàÿ± ÿßŸÑÿ≠ÿ±ÿßÿ´ÿ©', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  llama: { icon: 'ü¶ô', name: 'ŸÑÿßŸÖÿß', category: 'ŸÖÿßÿ¥Ÿäÿ©' },
  
  // Poultry (ÿØŸàÿßÿ¨ŸÜ)
  chicken: { icon: 'üêî', name: 'ÿØÿ¨ÿßÿ¨', category: 'ÿØŸàÿßÿ¨ŸÜ' },
  rooster: { icon: 'üêì', name: 'ÿØŸäŸÉ', category: 'ÿØŸàÿßÿ¨ŸÜ' },
  chick: { icon: 'üê•', name: 'ŸÉÿ™ŸÉŸàÿ™', category: 'ÿØŸàÿßÿ¨ŸÜ' },
  duck: { icon: 'ü¶Ü', name: 'ÿ®ÿ∑', category: 'ÿØŸàÿßÿ¨ŸÜ' },
  turkey: { icon: 'ü¶É', name: 'ÿØŸäŸÉ ÿ±ŸàŸÖŸä', category: 'ÿØŸàÿßÿ¨ŸÜ' },
  goose: { icon: 'ü¶¢', name: 'ÿ•Ÿàÿ≤', category: 'ÿØŸàÿßÿ¨ŸÜ' },
  
  // Birds (ÿ∑ŸäŸàÿ±)
  pigeon: { icon: 'üïäÔ∏è', name: 'ÿ≠ŸÖÿßŸÖ', category: 'ÿ∑ŸäŸàÿ±' },
  dove: { icon: 'üïäÔ∏è', name: 'ŸäŸÖÿßŸÖ', category: 'ÿ∑ŸäŸàÿ±' },
  peacock: { icon: 'ü¶ö', name: 'ÿ∑ÿßŸàŸàÿ≥', category: 'ÿ∑ŸäŸàÿ±' },
  parrot: { icon: 'ü¶ú', name: 'ÿ®ÿ®ÿ∫ÿßÿ°', category: 'ÿ∑ŸäŸàÿ±' },
  
  
  // Small Animals (ÿ≠ŸäŸàÿßŸÜÿßÿ™ ÿµÿ∫Ÿäÿ±ÿ©)
  rabbit: { icon: 'üê∞', name: 'ÿ£ÿ±ŸÜÿ®', category: 'ÿ≠ŸäŸàÿßŸÜÿßÿ™ ÿµÿ∫Ÿäÿ±ÿ©' },

  
  // Guard/Working Animals (ÿ≠ŸäŸàÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ≥ÿ© ŸàÿßŸÑÿπŸÖŸÑ)
  dog: { icon: 'üêï', name: 'ŸÉŸÑÿ® ÿ≠ÿ±ÿßÿ≥ÿ©', category: 'ÿ≠ŸäŸàÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ≥ÿ© ŸàÿßŸÑÿπŸÖŸÑ' },
  shepherdDog: { icon: 'ü¶Æ', name: 'ŸÉŸÑÿ® ÿ±ÿßÿπŸä', category: 'ÿ≠ŸäŸàÿßŸÜÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ≥ÿ© ŸàÿßŸÑÿπŸÖŸÑ' },
  
  // Insects (ÿ≠ÿ¥ÿ±ÿßÿ™)
  bee: { icon: 'üêù', name: 'ŸÜÿ≠ŸÑ', category: 'ÿ≠ÿ¥ÿ±ÿßÿ™' },
};

const getAnimalIcon = (type: string): string => {
  const lowercaseType = type.toLowerCase();
  if (lowercaseType.includes('ÿ®ŸÇÿ±ÿ©') || lowercaseType.includes('ÿ´Ÿàÿ±')) return 'üêÑ';
  if (lowercaseType.includes('ÿÆÿ±ŸàŸÅ') || lowercaseType.includes('ŸÜÿπÿ¨ÿ©')) return 'üêë';
  if (lowercaseType.includes('ÿØÿ¨ÿßÿ¨') || lowercaseType.includes('ÿØŸäŸÉ')) return 'üêî';
  if (lowercaseType.includes('ŸÖÿßÿπÿ≤')) return 'üêê';
  if (lowercaseType.includes('ÿ≠ÿµÿßŸÜ')) return 'üêé';
  if (lowercaseType.includes('ÿ≠ŸÖÿßÿ±')) return 'ü¶ì';
  if (lowercaseType.includes('ÿ£ÿ±ŸÜÿ®')) return 'üê∞';
  if (lowercaseType.includes('ÿ®ÿ∑ÿ©')) return 'ü¶Ü';
  if (lowercaseType.includes('ÿØŸäŸÉ ÿ±ŸàŸÖŸä')) return 'ü¶É';
  if (lowercaseType.includes('ÿ¨ŸÖŸÑ')) return 'üê™';
  if (lowercaseType.includes('ŸÉÿ™ŸÉŸàÿ™')) return 'üê•';
  if (lowercaseType.includes('ŸÉÿ®ÿ¥')) return 'üêè';
  if (lowercaseType.includes('ÿ´Ÿàÿ± ÿßŸÑÿ≠ÿ±ÿßÿ´ÿ©')) return 'üêÉ';
  if (lowercaseType.includes('ŸÑÿßŸÖÿß')) return 'ü¶ô';
  if (lowercaseType.includes('ŸÜÿ≠ŸÑ')) return 'üêù';
  if (lowercaseType.includes('ÿ∑ÿßŸàŸàÿ≥')) return 'ü¶ö';
  if (lowercaseType.includes('ÿ®ÿ®ÿ∫ÿßÿ°')) return 'ü¶ú';
  if (lowercaseType.includes('ÿ≠ŸÖÿßŸÖ')) return 'üïäÔ∏è';
  if (lowercaseType.includes('ŸäŸÖÿßŸÖ')) return 'üïäÔ∏è';
  if (lowercaseType.includes('ÿ•Ÿàÿ≤')) return 'ü¶¢';
  if (lowercaseType.includes('ÿ´Ÿàÿ±')) return 'üêÇ';
  if (lowercaseType.includes('ÿ¨ÿßŸÖŸàÿ≥')) return 'ü¶¨';
  if (lowercaseType.includes('ÿ´Ÿàÿ± ÿßŸÑÿ≠ÿ±ÿßÿ´ÿ©')) return 'üêÉ';
  if (lowercaseType.includes('ŸÑÿßŸÖÿß')) return 'ü¶ô';
  if (lowercaseType.includes('ŸÜÿ≠ŸÑ')) return 'üêù';
  if (lowercaseType.includes('ÿ∑ÿßŸàŸàÿ≥')) return 'ü¶ö';
  if (lowercaseType.includes('ÿ®ÿ®ÿ∫ÿßÿ°')) return 'ü¶ú';
  if (lowercaseType.includes('ÿ≠ŸÖÿßŸÖ')) return 'üïäÔ∏è';
  if (lowercaseType.includes('ŸäŸÖÿßŸÖ')) return 'üïäÔ∏è';
  if (lowercaseType.includes('ÿ•Ÿàÿ≤')) return 'ü¶¢';
  if (lowercaseType.includes('ÿ´Ÿàÿ±')) return 'üêÇ';
  if (lowercaseType.includes('ÿ¨ÿßŸÖŸàÿ≥')) return 'ü¶¨';
  if (lowercaseType.includes('ÿ´Ÿàÿ± ÿßŸÑÿ≠ÿ±ÿßÿ´ÿ©')) return 'üêÉ';
  if (lowercaseType.includes('ŸÑÿßŸÖÿß')) return 'ü¶ô';
  if (lowercaseType.includes('ŸÉŸÑÿ® ÿ±ÿßÿπŸä')) return 'ü¶Æ';
  if (lowercaseType.includes('ŸÉŸÑÿ® ÿ≠ÿ±ÿßÿ≥ÿ©')) return 'üêï';
  if (lowercaseType.includes('ÿ≠ÿ¥ÿ±ÿ©')) return 'üêù';

  
  return 'üêæ';
};

const getHealthStatusColor = (status: HealthStatus, theme: any) => {
  switch (status) {
    case 'excellent':
      return theme.colors.success;
    case 'good':
      return theme.colors.success;
    case 'fair':
      return theme.colors.warning;
    case 'poor':
      return theme.colors.error;
    default:
      return theme.colors.neutral.border;
  }
};

const getHealthStatusLabel = (status: HealthStatus) => {
  switch (status) {
    case 'excellent':
      return 'ŸÖŸÖÿ™ÿßÿ≤';
    case 'good':
      return 'ÿ¨ŸäÿØ';
    case 'fair':
      return 'ŸÖÿ™Ÿàÿ≥ÿ∑';
    case 'poor':
      return 'ÿ≥Ÿäÿ°';
    default:
      return 'ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ';
  }
};

const getBreedingStatusColor = (status: BreedingStatus, theme: any) => {
  switch (status) {
    case 'pregnant':
      return theme.colors.primary.base;
    case 'nursing':
      return theme.colors.info;
    case 'in_heat':
      return theme.colors.warning;
    case 'not_breeding':
    default:
      return theme.colors.neutral.border;
  }
};

const getBreedingStatusLabel = (status: BreedingStatus) => {
  switch (status) {
    case 'pregnant':
      return 'ÿ≠ÿßŸÖŸÑ';
    case 'nursing':
      return 'ŸÅŸä ŸÅÿ™ÿ±ÿ© ÿßŸÑÿ±ÿ∂ÿßÿπÿ©';
    case 'in_heat':
      return 'ŸÅŸä ŸÅÿ™ÿ±ÿ© ÿßŸÑÿ™ÿ≤ÿßŸàÿ¨';
    case 'not_breeding':
    default:
      return 'ÿ∫Ÿäÿ± ŸÖÿ™ÿ≤ÿßŸàÿ¨';
  }
};

const getBreedingStatusIcon = (status: BreedingStatus) => {
  switch (status) {
    case 'pregnant':
      return 'ü§∞';
    case 'nursing':
      return 'üë∂';
    case 'in_heat':
      return 'üî•';
    case 'not_breeding':
    default:
      return '‚ö™';
  }
};

const calculateExpectedBirthDate = (breedingDate: string, animalType: string): string => {
  if (!breedingDate) return '';
  
  const date = new Date(breedingDate);
  const lowercaseType = animalType.toLowerCase();
  
  // Gestation periods in days for different animals
  const gestationPeriods: Record<string, number> = {
    cow: 280, // ~9 months
    sheep: 150, // ~5 months
    goat: 150, // ~5 months
    camel: 390, // ~13 months
    horse: 340, // ~11 months
    donkey: 365, // ~12 months
    rabbit: 31, // ~1 month
    pig: 114, // ~4 months
    default: 0
  };

  let gestationDays = 0;
  
  // Find matching animal type
  Object.entries(gestationPeriods).forEach(([key, days]) => {
    if (lowercaseType.includes(key)) {
      gestationDays = days;
    }
  });

  if (gestationDays === 0) return '';

  date.setDate(date.getDate() + gestationDays);
  return date.toISOString().split('T')[0];
};

const getAnimalInfo = (type: string) => {
  const lowercaseType = type.toLowerCase();
  const animalType = Object.keys(ANIMAL_TYPES).find(key => 
    lowercaseType === key || 
    lowercaseType === ANIMAL_TYPES[key as keyof typeof ANIMAL_TYPES].name
  );
  return animalType ? ANIMAL_TYPES[animalType as keyof typeof ANIMAL_TYPES] : null;
};

const HEALTH_STATUS_ICONS = {
  excellent: 'üåü',
  good: 'üíö',
  fair: 'üíõ',
  poor: '‚ù§Ô∏è‚Äçü©π',
};

const BREEDING_STATUS_ICONS = {
  pregnant: 'üê£',
  nursing: 'üçº',
  in_heat: 'üíù',
  not_breeding: '‚≠ï',
};

const FIELD_ICONS = {
  birthDate: 'üéÇ',
  weight: '‚öñÔ∏è',
  feedingSchedule: 'üïí',
  feeding: 'ü•©',
  dailyFeedConsumption: 'üìä',
  health: 'üè•',
  diseases: 'ü§í',
  medications: 'üíä',
  vaccination: 'üíâ',
  nextVaccinationDate: 'üìÖ',
  notes: 'üìù',
};

export const AnimalDetailScreen = ({ navigation, route }: AnimalDetailScreenProps) => {
  const theme = useTheme();
  const { animals, deleteAnimal, addAnimalQuantity, removeAnimalQuantity } = useStock();
  const [isDeleting, setIsDeleting] = useState(false);

  const animal = animals.find(a => a.id === route.params.animalId);
  const animalInfo = animal ? getAnimalInfo(animal.type) : null;

  const handleDelete = useCallback(() => {
    Alert.alert(
      'ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≠ŸäŸàÿßŸÜ',
      'ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ Ÿáÿ∞ÿß ÿßŸÑÿ≠ŸäŸàÿßŸÜÿü',
      [
        {
          text: 'ÿ•ŸÑÿ∫ÿßÿ°',
          style: 'cancel',
        },
        {
          text: 'ÿ≠ÿ∞ŸÅ',
          style: 'destructive',
          onPress: async () => {
            setIsDeleting(true);
            try {
              await deleteAnimal(animal?.id || '');
              navigation.goBack();
            } catch (error) {
              console.error('Error deleting animal:', error);
              Alert.alert('ÿÆÿ∑ÿ£', 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ≠ÿ∞ŸÅ');
            } finally {
              setIsDeleting(false);
            }
          },
        },
      ]
    );
  }, [animal?.id, deleteAnimal, navigation]);

  const handleQuantityChange = useCallback(async (action: 'add' | 'remove') => {
    if (!animal) return;
    try {
      if (action === 'add') {
        await addAnimalQuantity(animal.id, 1);
      } else {
        await removeAnimalQuantity(animal.id, 1);
      }
    } catch (error) {
      Alert.alert('ÿÆÿ∑ÿ£', 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÉŸÖŸäÿ©');
    }
  }, [animal, addAnimalQuantity, removeAnimalQuantity]);

  const handleEdit = useCallback(() => {
    if (!animal) return;
    navigation.navigate('AddAnimal', { 
      animalId: animal.id,
      mode: 'edit'
    });
  }, [animal, navigation]);

  const renderField = useCallback((label: string, value: string | undefined | null, icon: string) => {
    if (!value) return null;
    
    return (
      <Animated.View 
        entering={FadeInDown.delay(100).springify()}
        style={[styles.infoCard, { backgroundColor: theme.colors.neutral.surface }]}
      >
        <View style={styles.infoHeader}>
          <Text style={styles.fieldIcon}>{icon}</Text>
          <Text style={[styles.infoTitle, { color: theme.colors.neutral.textPrimary }]}>
            {label}
          </Text>
        </View>
        <Text style={[styles.infoContent, { color: theme.colors.neutral.textSecondary }]}>
          {value}
        </Text>
      </Animated.View>
    );
  }, [theme.colors.neutral.surface, theme.colors.neutral.textPrimary, theme.colors.neutral.textSecondary]);

  if (!animal) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.neutral.background }]}>
        <StatusBar
          backgroundColor={theme.colors.neutral.surface}
          barStyle="dark-content"
        />
        <View style={[styles.container, styles.centerContent]}>
          <MaterialCommunityIcons 
            name="alert-circle-outline" 
            size={64} 
            color={theme.colors.error} 
          />
          <Text style={[styles.errorText, { color: theme.colors.error }]}>
            ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑÿ≠ŸäŸàÿßŸÜ
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.neutral.background }]}>
      <StatusBar
        backgroundColor={theme.colors.neutral.surface}
        barStyle="dark-content"
      />
      <View style={[styles.container, { backgroundColor: theme.colors.neutral.background }]}>
        <ScrollView style={styles.scrollView}>
          <Animated.View 
            entering={FadeInDown.springify()}
            style={[
              styles.header,
              { 
                backgroundColor: theme.colors.neutral.surface,
                ...Platform.select({
                  ios: {
                    shadowColor: theme.colors.neutral.textPrimary,
                    shadowOffset: { width: 0, height: 2 },
                    shadowOpacity: 0.1,
                    shadowRadius: 8,
                  },
                  android: {
                    elevation: 4,
                  },
                }),
              }
            ]}
          >
            <View style={styles.headerContent}>
              <View style={[
                styles.iconContainer,
                { backgroundColor: animal.healthStatus === 'poor' ? theme.colors.error : theme.colors.primary.base }
              ]}>
                <Text style={styles.animalIcon}>{animalInfo?.icon || 'üêæ'}</Text>
              </View>
              <View style={styles.headerInfo}>
                <View style={styles.titleContainer}>
                  <Text style={[styles.animalName, { color: theme.colors.neutral.textPrimary }]}>
                    {animalInfo?.name || animal.type}
                  </Text>
                  <Text style={[styles.animalCategory, { color: theme.colors.neutral.textSecondary }]}>
                    {animalInfo?.category}
                  </Text>
                </View>
                <View style={styles.subtitleContainer}>
                  <View style={styles.genderContainer}>
                    <Text style={styles.genderIcon}>
                      {animal.gender === 'male' ? '‚ôÇÔ∏è' : '‚ôÄÔ∏è'}
                    </Text>
                    <Text style={[styles.genderText, { color: theme.colors.neutral.textSecondary }]}>
                      {animal.gender === 'male' ? 'ÿ∞ŸÉÿ±' : 'ÿ£ŸÜÿ´Ÿâ'}
                    </Text>
                  </View>
                  <Text style={styles.breedingIcon}>
                    {getBreedingStatusIcon(animal.breedingStatus)}
                  </Text>
                </View>
              </View>
            </View>

            <View style={styles.headerActions}>
              <TouchableOpacity
                style={[styles.actionButton, { backgroundColor: theme.colors.primary.base }]}
                onPress={handleEdit}
              >
                <MaterialCommunityIcons name="pencil" size={24} color="#FFF" />
                <Text style={styles.actionButtonText}>ÿ™ÿπÿØŸäŸÑ</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.actionButton, { backgroundColor: theme.colors.error }]}
                onPress={handleDelete}
                disabled={isDeleting}
              >
                {isDeleting ? (
                  <ActivityIndicator color="#FFF" />
                ) : (
                  <>
                    <MaterialCommunityIcons name="delete" size={24} color="#FFF" />
                    <Text style={styles.actionButtonText}>ÿ≠ÿ∞ŸÅ</Text>
                  </>
                )}
              </TouchableOpacity>
            </View>

            <View style={styles.statsContainer}>
              <View style={[styles.statCard, { backgroundColor: theme.colors.neutral.background }]}>
                <Text style={[styles.statValue, { color: theme.colors.neutral.textPrimary }]}>
                  {animal.count}
                </Text>
                <Text style={[styles.statLabel, { color: theme.colors.neutral.textSecondary }]}>
                  {animal.count === 1 ? 'ÿ≠ŸäŸàÿßŸÜ' : 'ÿ≠ŸäŸàÿßŸÜÿßÿ™'}
                </Text>
                <View style={styles.quantityControls}>
                  <TouchableOpacity
                    style={[styles.quantityButton, { backgroundColor: theme.colors.primary.base }]}
                    onPress={() => handleQuantityChange('add')}
                  >
                    <MaterialCommunityIcons name="plus" size={20} color="#FFF" />
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[styles.quantityButton, { backgroundColor: theme.colors.error }]}
                    onPress={() => handleQuantityChange('remove')}
                    disabled={animal.count <= 1}
                  >
                    <MaterialCommunityIcons name="minus" size={20} color="#FFF" />
                  </TouchableOpacity>
                </View>
              </View>

              <View style={[styles.statCard, { backgroundColor: theme.colors.neutral.background }]}>
                <View style={[
                  styles.healthIndicator,
                  { backgroundColor: getHealthStatusColor(animal.healthStatus, theme) }
                ]}>
                  <Text style={styles.healthIcon}>
                    {HEALTH_STATUS_ICONS[animal.healthStatus]}
                  </Text>
                </View>
                <Text style={[styles.statLabel, { color: theme.colors.neutral.textSecondary }]}>
                  ÿßŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿµÿ≠Ÿäÿ©
                </Text>
                <Text style={[styles.healthStatus, { color: theme.colors.neutral.textPrimary }]}>
                  {getHealthStatusLabel(animal.healthStatus)}
                </Text>
              </View>

              <View style={[styles.statCard, { backgroundColor: theme.colors.neutral.background }]}>
                <View style={[
                  styles.breedingIndicator,
                  { backgroundColor: getBreedingStatusColor(animal.breedingStatus, theme) }
                ]}>
                  <Text style={styles.breedingStatusIcon}>
                    {getBreedingStatusIcon(animal.breedingStatus)}
                  </Text>
                </View>
                <Text style={[styles.statLabel, { color: theme.colors.neutral.textSecondary }]}>
                  ÿ≠ÿßŸÑÿ© ÿßŸÑÿ™ŸÉÿßÿ´ÿ±
                </Text>
                <Text style={[styles.breedingStatus, { color: theme.colors.neutral.textPrimary }]}>
                  {getBreedingStatusLabel(animal.breedingStatus)}
                </Text>
                {animal.lastBreedingDate && (
                  <View style={styles.breedingDateContainer}>
                    <Text style={styles.calendarIcon}>üìÖ</Text>
                    <Text style={[styles.breedingDate, { color: theme.colors.neutral.textSecondary }]}>
                      ÿ¢ÿÆÿ± ÿ™ŸÉÿßÿ´ÿ±: {new Date(animal.lastBreedingDate).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit'
                      })}
                    </Text>
                  </View>
                )}
                {animal.breedingStatus === 'pregnant' && animal.expectedBirthDate && (
                  <View style={styles.breedingDateContainer}>
                    <Text style={styles.calendarIcon}>üìÖ</Text>
                    <Text style={[styles.breedingDate, { color: theme.colors.warning }]}>
                      ÿßŸÑŸàŸÑÿßÿØÿ© ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©: {new Date(animal.expectedBirthDate).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit'
                      })}
                    </Text>
                  </View>
                )}
              </View>
            </View>
          </Animated.View>

          <View style={styles.content}>
            {renderField('ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖŸäŸÑÿßÿØ', animal.birthDate ? 
              new Date(animal.birthDate).toLocaleDateString('en-US', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
              }) : null, 
              FIELD_ICONS.birthDate
            )}
            
            {renderField('ÿßŸÑŸàÿ≤ŸÜ', animal.weight ? 
              `${animal.weight} ŸÉÿ¨ŸÖ` : null,
              FIELD_ICONS.weight
            )}
            
            {renderField('ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿßŸÑÿ™ÿ∫ÿ∞Ÿäÿ©', animal.feedingSchedule,
              FIELD_ICONS.feedingSchedule
            )}
            
            {renderField('ÿßŸÑÿ™ÿ∫ÿ∞Ÿäÿ©', animal.feeding,
              'üçΩÔ∏è'
            )}
            
            {renderField('ŸÉŸÖŸäÿ© ÿßŸÑÿπŸÑŸÅ ÿßŸÑŸäŸàŸÖŸä', animal.dailyFeedConsumption ? 
              `${animal.dailyFeedConsumption} ŸÉÿ¨ŸÖ` : null,
              'ü•ò'
            )}
            
            {renderField('ÿßŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿµÿ≠Ÿäÿ©', animal.health,
              'üè•'
            )}
            
            {renderField('ÿßŸÑÿ£ŸÖÿ±ÿßÿ∂', animal.diseases,
              'ü§í'
            )}
            
            {renderField('ÿßŸÑÿ£ÿØŸàŸäÿ©', animal.medications,
              'üíä'
            )}
            
            {renderField('ÿßŸÑÿ™ŸÑŸÇŸäÿ≠', animal.vaccination,
              'üíâ'
            )}
            
            {animal.nextVaccinationDate && renderField('ŸÖŸàÿπÿØ ÿßŸÑÿ™ŸÑŸÇŸäÿ≠ ÿßŸÑŸÇÿßÿØŸÖ',
              new Date(animal.nextVaccinationDate).toLocaleDateString('en-US', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
              }),
              'üìÖ'
            )}
            
            {renderField('ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™', animal.notes,
              'üìù'
            )}
          </View>
        </ScrollView>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  centerContent: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    borderBottomLeftRadius: 24,
    borderBottomRightRadius: 24,
    padding: 24,
    gap: 24,
    ...Platform.select({
      android: {
        paddingTop: StatusBar.currentHeight,
      },
    }),
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
  },
  iconContainer: {
    width: 72,
    height: 72,
    borderRadius: 36,
    justifyContent: 'center',
    alignItems: 'center',
  },
  animalIcon: {
    fontSize: 40,
  },
  headerInfo: {
    flex: 1,
    gap: 8,
  },
  titleContainer: {
    gap: 4,
  },
  animalName: {
    fontSize: 24,
    fontWeight: '600',
    textAlign: 'right',
  },
  animalCategory: {
    fontSize: 16,
    textAlign: 'right',
  },
  subtitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
  },
  genderContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  genderIcon: {
    fontSize: 20,
  },
  genderText: {
    fontSize: 16,
  },
  breedingIcon: {
    fontSize: 20,
  },
  headerActions: {
    flexDirection: 'row',
    gap: 12,
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 12,
    gap: 8,
  },
  actionButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '500',
  },
  statsContainer: {
    flexDirection: 'row',
    gap: 12,
  },
  statCard: {
    flex: 1,
    padding: 16,
    borderRadius: 16,
    alignItems: 'center',
    gap: 8,
  },
  statValue: {
    fontSize: 24,
    fontWeight: '600',
  },
  statLabel: {
    fontSize: 14,
  },
  quantityControls: {
    flexDirection: 'row',
    gap: 8,
    marginTop: 8,
  },
  quantityButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  healthIndicator: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  healthStatus: {
    fontSize: 16,
    fontWeight: '500',
  },
  breedingIndicator: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  breedingStatusIcon: {
    fontSize: 24,
  },
  breedingStatus: {
    fontSize: 16,
    fontWeight: '500',
  },
  content: {
    padding: 24,
    gap: 16,
  },
  infoCard: {
    padding: 16,
    borderRadius: 16,
    gap: 12,
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 8,
      },
      android: {
        elevation: 4,
      },
    }),
  },
  infoHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: '600',
    textAlign: 'right',
  },
  infoContent: {
    fontSize: 16,
    lineHeight: 24,
    textAlign: 'right',
  },
  fieldIcon: {
    fontSize: 24,
  },
  errorText: {
    fontSize: 16,
    marginTop: 16,
    textAlign: 'center',
  },
  breedingDateContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    marginTop: 8,
    paddingTop: 8,
    borderTopWidth: 1,
    borderTopColor: 'rgba(0, 0, 0, 0.1)',
  },
  breedingDate: {
    fontSize: 12,
  },
  calendarIcon: {
    fontSize: 24,
  },
  healthIcon: {
    fontSize: 24,
    color: '#FFF',
  },
}); 